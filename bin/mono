#!/usr/bin/env node

const argv = require('argh').argv;
const Mono = require('../');

//
// Initialize the mono instance. Assume that the cwd() is the root of the
// mono and that default params are given as argv
//
const mono = new Mono(process.cwd(), argv);

/**
 * Simple helper function to execute a given command.
 *
 * @param {String} name Name of the command to execute, also name of argv.
 * @returns {Undefined} Exit the process on command completion.
 * @private
 */
function command(name) {
  const arg = argv[name];

  if ('string' === typeof arg) {
    return process.exit(mono.repo(arg)[name]() ? 0 : 1);
  }

  return process.exit(mono[name]() ? 0 : 1);
}

if (argv.install) return command('install');
if (argv.publish) return command('publish');
if (argv.test) return command('test');
if (argv.link) return command('link');

//
// Output help information for any other unknown command.
//
require('warnings')('mono:help', {
  prefix: 'hotpink'
}).write([
  'mono(-repos): Mono repo management made easy',
  '',
  'usage: mono [flags]',
  '',
  '--publish [name]           Publish all packages, when a name is given only release',
  '                           that given package instead of all packages.',
  '     --release [type]      Type of release, either `patch`, `minor` or `major`.',
  '     --version [semver]    Instead of an automated bump, release the specified version.',
  '     --message="message"   Optional message for the publish.',
  '--test [name]              Run the test suite, all, or for the given name.',
  '--link [name]              npm link packages, all, or for the given name.',
  '--install [name]           npm install dependencies, all, or for the given name.',
  '',
  'examples:',
  '',
  '  mono --publish foo --release patch',
  '  mono --install && mono --link'
]);
